<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <sub-flow name="wmf-logging-flow">
         <choice doc:name="Choice">
             <when expression="#[flowVars.failedRecords.size() == 0]">
                 <logger message="#[&quot;Message ID : &quot; + message.rootId + &quot; COMPLETED - Summary: &quot; + loadedRecords.size() + &quot; loadedRecords, &quot; + successfulRecords.size() + &quot; successfulRecords, &quot; + failedRecords.size() + &quot; failedRecords&quot;]" level="INFO" doc:name="Log COMPLETED"/>
                 <set-payload value="#[flowVars.inboundMessage]" doc:name="Set inboundMessage as Payload "/>
                 <vm:outbound-endpoint exchange-pattern="one-way" path="${wmf.inboundmessage.completed.status.vm}" connector-ref="VM" doc:name="Update Inbound Event Status to Completed"/>
             </when>
             <when expression="#[flowVars.successfulRecords.size() &gt; 0]">
                 <logger message="#[&quot;Message ID : &quot; + message.rootId + &quot; PARTIAL COMPLETE - Summary: &quot; + loadedRecords.size() + &quot; loadedRecords, &quot; + successfulRecords.size() + &quot; successfulRecords, &quot; + failedRecords.size() + &quot; failedRecords&quot;]" level="INFO" doc:name="Log PARTIAL COMPLETE"/>
           <async doc:name="Async - Generate Email Notification">
               <dw:transform-message doc:name="Transform Message">
                   <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	exception: {
		cause:  p('partial.errorCause'),
		message: flowVars.errorMessage,
		stackTrace: ""
	},
	inboundMessage: flowVars.inboundMessage
}]]></dw:set-payload>
               </dw:transform-message>
               <vm:outbound-endpoint exchange-pattern="one-way" path="${wmf.common.error.handler.vm}" connector-ref="VM" doc:name="VM Error Event"/>
           </async>
           <set-payload value="#[flowVars.inboundMessage]" doc:name="Set InboundMessage as Payload"/>
           <vm:outbound-endpoint exchange-pattern="one-way" path="${wmf.inboundmessage.partialcomplete.status.vm}" connector-ref="VM" doc:name="Update Inbound Event Status to PARTIAL COMPLETED"/>
             </when>
             <when expression="#[flowVars.successfulRecords.size() == 0]">
                 <logger message="#[&quot;Message ID : &quot; + message.rootId + &quot; ERROR - Summary: &quot; + loadedRecords.size() + &quot; loadedRecords, &quot; + successfulRecords.size() + &quot; successfulRecords, &quot; + failedRecords.size() + &quot; failedRecords&quot;]" level="INFO" doc:name="Log ERROR"/>
           <async doc:name="Async - Generate Email Notification">
               <dw:transform-message doc:name="Transform Message">
                   <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	exception: {
		cause:  p('errorCause'),
		message: flowVars.errorMessage,
		stackTrace: ""
	},
	inboundMessage: flowVars.inboundMessage
}]]></dw:set-payload>
               </dw:transform-message>
               <vm:outbound-endpoint exchange-pattern="one-way" path="${wmf.common.error.handler.vm}" connector-ref="VM" doc:name="VM Error Event"/>
           </async>
           <set-payload value="#[flowVars.inboundMessage]" doc:name="Set InboundMessage as Payload"/>
           <vm:outbound-endpoint exchange-pattern="one-way" path="${wmf.inboundmessage.error.status.vm}" doc:name="Update Inbound Event Status to ERROR"/>
             </when>
             <otherwise>
                 <logger message="#[&quot;Message ID : &quot; + message.rootId + &quot; DEFAULT CHOICE - Summary: &quot; + loadedRecords.size() + &quot; loadedRecords, &quot; + successfulRecords.size() + &quot; successfulRecords, &quot; + failedRecords.size() + &quot; failedRecords&quot;]" level="INFO" doc:name="Default Choice"/>
             </otherwise>
         </choice>
    </sub-flow>
    
    <sub-flow name="initial-http-adhoc-variable-sub-flow">
        <set-variable variableName="companyCode" value="#[message.inboundProperties.'http.query.params'.loct]" doc:name="Set Company Code"/>
        <set-variable variableName="ZCONR" value="#[message.inboundProperties.'http.query.params'.zconr]" doc:name="Set ZCONR Variable"/>
    </sub-flow>
    
    <sub-flow name="initial-batch-variable-sub-flow">
        <set-variable variableName="inboundMessage" value="#[payload]" doc:name="Set Inbound Message"/>
		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
read(flowVars.inboundMessage.messageContent, "application/json")]]></dw:set-payload>
		</dw:transform-message>

        <set-variable variableName="companyCode" value="#[subString(flowVars.inboundMessage.instanceId,12,16)]" doc:name="Set the Company Code"/>
    </sub-flow>
       
    <sub-flow name="get-dataweave-sub-flow">
        <choice doc:name="Choice">
            <when expression="#[flowVars.companyCode==&quot;OG02&quot;]">
            	<dw:transform-message doc:name="Get OG02 Mapping File">
                	<dw:set-payload resource="file:D:/Mule/Config/application/dataweave/eu-sqlsap-plannedtime-OG02-mapping.dwl"/> 
            	</dw:transform-message>
            </when>
            <when expression="#[flowVars.companyCode==&quot;WB02&quot;]">
                <dw:transform-message doc:name="Get WB02 Mapping File">
                	<dw:set-payload resource="file:D:/Mule/Config/application/dataweave/eu-sqlsap-plannedtime-WB02-mapping.dwl"/> 
            	</dw:transform-message>
            </when>
            <when expression="#[flowVars.companyCode==&quot;WE02&quot;]">
                <dw:transform-message doc:name="Get WE02 Mapping File">
                	<dw:set-payload resource="file:D:/Mule/Config/application/dataweave/eu-sqlsap-plannedtime-WE02-mapping.dwl"/> 
            	</dw:transform-message>
            </when>
            <when expression="#[flowVars.companyCode==&quot;WQ02&quot;]">
                <dw:transform-message doc:name="Get WQ02 Mapping File">
                	<dw:set-payload resource="file:D:/Mule/Config/application/dataweave/eu-sqlsap-plannedtime-WQ02-mapping.dwl"/> 
            	</dw:transform-message>
            </when>
            <otherwise>
                <logger message="Dataweave file not found" level="INFO" doc:name="No Company Code"/>
            </otherwise>
        </choice>
    </sub-flow>
    
</mule>
